AWSTemplateFormatVersion: '2010-09-09'
Description: CFT to launch lambda function to gather disposed vulnerability from Cloud Insight
Parameters:
  pCID:
    Description: Target AlertLogic Account ID
    Type: String
  pDatacenter:
    Description: Data center location
    Type: String
    AllowedValues:
      - "ASHBURN"
      - "DENVER"
      - "NEWPORT"
  pUserName:
    Description: Your Cloud Insight User Name
    Type: String
  pPassword:
    Description: Your Cloud Insight Password
    Type: String
    NoEcho: true
  pDestS3Bucket:
    Description: >
      The S3 bucket name where you wish to store the output, leave it empty if you want to automatically create the S3 bucket
    Type: String
  pSourceS3Bucket:
    Description: >
      The prefix of the S3 bucket which contains Lambda package. Note that the name of the bucket must contain a region name suffix. The following is the valid backet name syntax: <bucket_name_prefix>.us-east-1.
    Default: "al-deployment-services"
    Type: String
  pLambdaPackages:
    Description: Lambda package which implement the report
    Default: "ci_disposed_report.zip"
    Type: String
  pFindAllChild:
    Description: Set to True if you want the Lambda function to search for child CID as well
    Default: "False"
    Type: String
    AllowedValues:
      - "True"
      - "False"
Conditions:
  CreateBucket: !Equals
    - ''
    - !Ref pDestS3Bucket
Mappings:
  YarpMap:
    ASHBURN:
      "yarp": "api.cloudinsight.alertlogic.com"
    DENVER:
      "yarp": "api.cloudinsight.alertlogic.com"
    NEWPORT:
      "yarp": "api.cloudinsight.alertlogic.co.uk"
Resources:
  LambdaKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: AL CI Disposed Report Lambda KMS Key
      Enabled: 'true'
      EnableKeyRotation: 'true'
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
        - Sid: Allow administration of the key
          Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action: ['kms:Create*', 'kms:Describe*', 'kms:Enable*', 'kms:List*', 'kms:Put*',
            'kms:Update*', 'kms:Revoke*', 'kms:Disable*', 'kms:Get*', 'kms:Delete*',
            'kms:ScheduleKeyDeletion', 'kms:CancelKeyDeletion', 'kms:Decrypt']
          Resource: '*'
        - Sid: Allow Lambda to use the key
          Effect: Allow
          Principal:
            AWS:
              - !GetAtt [CIDisposedReportLambdaRole, Arn]
              - !GetAtt [EncryptionHelperLambdaRole, Arn]
          Action: ['kms:Encrypt', 'kms:Decrypt']
          Resource: '*'

  LambdaKMSKeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-KMSKey"
      TargetKeyId: !Ref LambdaKMSKey

  EncryptionHelperLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action: ['logs:*']
            Effect: Allow

  EncryptionHelperLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Encrypt the given payload and return the CipherText
      Runtime: python2.7
      Handler: index.lambda_handler
      Timeout: '180'
      FunctionName: !Sub "${AWS::StackName}-EncryptionHelper"
      Code:
        ZipFile: |
          #Taken from: https://github.com/RealSalmon/lambda-backed-cloud-formation-kms-encryption
          import base64
          import uuid
          import httplib
          import urlparse
          import json
          import boto3
          def send_response(request, response, status=None, reason=None):
              """ Send our response to the pre-signed URL supplied by CloudFormation
              If no ResponseURL is found in the request, there is no place to send a
              response. This may be the case if the supplied event was for testing.
              """

              if status is not None:
                  response['Status'] = status

              if reason is not None:
                  response['Reason'] = reason

              if 'ResponseURL' in request and request['ResponseURL']:
                  url = urlparse.urlparse(request['ResponseURL'])
                  body = json.dumps(response)
                  https = httplib.HTTPSConnection(url.hostname)
                  https.request('PUT', url.path+'?'+url.query, body)

              return response

          def lambda_handler(event, context):

              response = {
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Status': 'SUCCESS'
              }

              # PhysicalResourceId is meaningless here, but CloudFormation requires it
              if 'PhysicalResourceId' in event:
                  response['PhysicalResourceId'] = event['PhysicalResourceId']
              else:
                  response['PhysicalResourceId'] = str(uuid.uuid4())

              # There is nothing to do for a delete request
              if event['RequestType'] == 'Delete':
                  return send_response(event, response)

              # Encrypt the value using AWS KMS and return the response
              try:

                  for key in ['KeyId', 'PlainText']:
                      if key not in event['ResourceProperties'] or not event['ResourceProperties'][key]:
                          return send_response(
                              event, response, status='FAILED',
                              reason='The properties KeyId and PlainText must not be empty'
                          )

                  client = boto3.client('kms')
                  encrypted = client.encrypt(
                      KeyId=event['ResourceProperties']['KeyId'],
                      Plaintext=event['ResourceProperties']['PlainText']
                  )

                  response['Data'] = {
                      'CipherText': base64.b64encode(encrypted['CiphertextBlob'])
                  }
                  response['Reason'] = 'The value was successfully encrypted'

              except Exception as E:
                  response['Status'] = 'FAILED'
                  response['Reason'] = 'Encryption Failed - See CloudWatch logs for the Lamba function backing the custom resource for details'
                  print (response)
                  print (E)
              return send_response(event, response)

      Role: !GetAtt [EncryptionHelperLambdaRole, Arn]

  CIDisposedReportBucket:
      DeletionPolicy: Retain
      Condition: CreateBucket
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private

  CIDisposedReportLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action: ['logs:*']
            Effect: Allow
      - PolicyName: WriteToS3
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource: !If [CreateBucket, !Join ['', ['arn:aws:s3:::', !Ref 'CIDisposedReportBucket', '/*']], !Join ['', ['arn:aws:s3:::', !Ref 'pDestS3Bucket', '/*']]]
            Action:
            - s3:PutObject
      - PolicyName: ExecuteCIDisposedReportLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource:
            - !Join [':', ['arn:aws:lambda', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'function', !Sub "${AWS::StackName}-CIDisposedReport" ]]
            Action: ['lambda:InvokeFunction']

  CIDisposedReportLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Search and report disposed vulnerability from Cloud Insight
      Runtime: python2.7
      Handler: ci_disposed_report_driver.lambda_handler
      Timeout: '300'
      MemorySize: '1024'
      FunctionName: !Sub "${AWS::StackName}-CIDisposedReport"
      Code:
        S3Bucket:
          !Join
            - '.'
            - - !Ref 'pSourceS3Bucket'
              - !Ref 'AWS::Region'
        S3Key:
          !Join
            - '/'
            - - 'lambda_packages'
              - !Ref 'pLambdaPackages'
      Role: !GetAtt [CIDisposedReportLambdaRole, Arn]
      Environment:
        Variables:
          CID: !Ref pCID
          YARP: !FindInMap [YarpMap, !Ref pDatacenter, 'yarp']
          USER_NAME: !Ref 'pUserName'
          PASSWORD: !GetAtt ['EncryptedPassword', 'CipherText']
          FIND_CHILD: !Ref 'pFindAllChild'
          S3_BUCKET_NAME: !If [CreateBucket, !Ref 'CIDisposedReportBucket', !Ref 'pDestS3Bucket']
          WORKER_INVOCATION: 'Event'
          WORKER_NAME: !Sub "${AWS::StackName}-CIDisposedReport"

  EncryptedPassword:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt [EncryptionHelperLambda, Arn]
      KeyId: !Ref LambdaKMSKey
      PlainText: !Ref 'pPassword'

  CIDisposedReportLambdaInvocationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: ExecuteCIDisposedReportLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action: ['lambda:InvokeFunction']
            Effect: Allow
            Resource:
            - !GetAtt CIDisposedReportLambda.Arn

  CIDisposedReportLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CIDisposedReportLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CIDisposedReportLambdaScheduledEvent.Arn
      Action: lambda:invokeFunction

  CIDisposedReportLambdaScheduledEvent:
    Type: "AWS::Events::Rule"
    Properties:
      Description: !Sub "Execute the ${AWS::StackName}-CIDisposedReportLambda on a scheduled basis"
      RoleArn: !GetAtt CIDisposedReportLambdaInvocationRole.Arn
      ScheduleExpression: "rate(1 day)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt CIDisposedReportLambda.Arn
          Id: TargetFunction
          Input: '{"type": "find_disposed", "log_level": "info", "source": "aws.event"}'
